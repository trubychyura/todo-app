{"version":3,"sources":["TodoItem.js","Todo.js","index.js"],"names":["TodoItem","props","isChecked","value","onClick","onClick2","type","checked","style","textDecoration","children","className","Todo","inputValue","state","todoItems","todos","buttonValue","this","filterItems","activeTasksLength","filter","todo","length","ref","element","onKeyPress","event","handleKeyPress","addItem","map","item","removeItem","bind","text","setButtonValue","key","setState","prevState","items","foundndItems","newTodos","forEach","input","maxValue","Math","max","React","Component","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.76d4d0ee.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TodoItem = props => {\n  const { isChecked, value, onClick, onClick2 } = props;\n  return (\n    <>\n      <li>\n        <input\n          type=\"checkbox\"\n          checked={isChecked ? \"checked\" : \"\"}\n          onClick={() => onClick2(value) }\n        />\n        <span style ={{textDecoration:isChecked ? 'line-through': '' }} >{props.children}</span>\n        <button \n          className=\"delete-btn\"\n          onClick={() => onClick(value)}\n        >X</button>\n      </li>\n    </>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport \"./styles.css\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputValue = \"\";\n    this.state = {\n      todoItems: this.props.todos,\n      buttonValue: \"\"\n    };\n  }\n\n  render() {\n    const todoItems = this.filterItems(this.state.todoItems);\n    const activeTasksLength = this.state.todoItems.filter(\n      todo => todo.isChecked === false\n    ).length;\n   \n    return (\n      <div className=\"main-container\">\n        <div className=\"input-container\">\n          <h1>Todo</h1>\n          <input\n            className=\"text-input\"\n            type=\"text\"\n            ref={element => (this.inputValue = element)}\n            onKeyPress={event => this.handleKeyPress(event)}\n          />\n          <button className=\"btn\" onClick={() => this.addItem(this.inputValue)}>\n            Add\n          </button>\n          <span>\n            remaining: <span className=\"numbers\">{activeTasksLength}</span> of\n            <span className=\"numbers\"> {this.state.todoItems.length}</span>\n          </span>\n        </div>\n        <ul>\n          {todoItems.map(item => {\n            return (\n              <TodoItem\n                value={item.value}\n                key={item.value}\n                onClick={this.removeItem.bind(this)}\n                isChecked={item.isChecked}\n                onClick2={this.isChecked.bind(this)}\n              >\n                {item.text}\n              </TodoItem>\n            );\n          })}\n        </ul>\n        <div>\n          <button onClick={() => this.setButtonValue(\"All\")} className=\"btn\">\n            All\n          </button>\n          <button className=\"btn\" onClick={() => this.setButtonValue(\"Done\")}>\n            Done\n          </button>\n          <button className=\"btn\" onClick={() => this.setButtonValue(\"Active\")}>\n            Active\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  handleKeyPress(event) {\n    if (event.key === \"Enter\") {\n      this.addItem(this.inputValue);\n    }\n  }\n\n  setButtonValue(value) {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        buttonValue: value\n      };\n    });\n  }\n\n  filterItems(items) {\n    let foundndItems;\n\n    switch (this.state.buttonValue) {\n      case \"Active\":\n        foundndItems = items.filter(item => item.isChecked === false);\n        break;\n      case \"Done\":\n        foundndItems = items.filter(item => item.isChecked === true);\n        break;\n      default:\n        foundndItems = items;\n    }\n    return foundndItems;\n  }\n\n  isChecked(value) {\n    let newTodos = [...this.state.todoItems];\n\n    newTodos.forEach(todo => {\n      if (todo.value === value) {\n        todo.isChecked = !todo.isChecked;\n      }\n    });\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        todoItems: newTodos\n      };\n    });\n  }\n\n  removeItem(value) {\n    const newTodos = this.state.todoItems.filter(todo => todo.value !== value);\n\n    this.setState(prevState => {\n      return { ...prevState, todoItems: newTodos };\n    });\n  }\n\n  addItem(input) {\n    if (input.value === \"\") {\n      return;\n    }\n\n    const maxValue =\n      this.state.todoItems.length > 0\n        ? Math.max(...this.state.todoItems.map(item => item.value))\n        : 0;\n\n    const newTodos = [\n      ...this.state.todoItems,\n      { value: maxValue + 1, text: input.value, isChecked: false }\n    ];\n\n    input.value = \"\";\n    this.setState(prevState => {\n      return { buttonValue: prevState.buttonValue, todoItems: newTodos };\n    });\n  }\n}\n\nexport default Todo;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Todo from \"./Todo\"\nimport \"./styles.css\";\n\nconst todos = [\n  { value: 1, text: 111, isChecked: false },\n  { value: 2, text: 222, isChecked: true }\n];\n\nconst App = () => {\n  return <Todo todos={todos} />;\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}